# 项目文件描述


- README.md: bella-issues-bot项目的主要说明文档，介绍了这个基于AI的代码开发助手工具。描述了两种工作模式：个人开发助手和GitHub自动化模式。详细说明了项目的主要功能、记忆系统（包括日志管理、版本管理和文件记忆），以及安装方法、配置选项和使用示例。

- quick-start.md: bella-issues-bot项目的使用指南文档，详细介绍了项目的主要功能和使用方法，包括个人开发助手模式、GitHub工作流集成、Issue处理自动化、编程API使用方法和项目配置说明。文档展示了如何安装、初始化文件记忆系统和使用AI助手处理开发需求。

- client/README_GITHUB_WORKFLOWS.md: GitHub工作流生成器文档，详细介绍了如何使用bella-issues-bot自动生成GitHub Actions工作流配置。包含功能概述、命令行参数、工作流文件详解、配置要求、使用场景和自定义方法等内容。

- client/github_workflow_generator.py: GitHub工作流生成器模块，用于创建GitHub Actions工作流文件，实现bella-issues-bot与GitHub的集成。提供generate_workflow_files函数和命令行接口，可生成文件记忆初始化和Issue处理两种工作流配置文件。

- scripts/generate_workflows.sh: Bash脚本，为bella-issues-bot集成提供命令行接口，包含帮助信息展示和参数传递功能。该脚本最终调用Python模块client.github_workflow_generator来实际生成工作流文件，支持设置输出目录、分支名称和模型参数等选项。

- scripts/init_file_memory.sh: 一个Bash脚本，作为client/file_memory_client.py的命令行包装器。提供了简化的接口来运行文件记忆初始化，支持设置项目目录、AI模型、温度等参数。包含帮助信息展示功能，并将所有命令行参数传递给Python模块。

- scripts/run_bot.sh: 启动bella-issues-bot的Bash帮助脚本，简化命令行参数输入。提供简化的参数选项，支持设置模型名称、温度等参数，并调用Python客户端模块。

- pyproject.toml: 项目配置文件，定义了bella-issues-bot项目的元数据、依赖项和工具配置。包含项目版本(0.1.17)、依赖库列表、命令行入口点和代码检查工具配置。该文件是Poetry包管理工具使用的主要配置文件。


# 文件内容



```
File: README.md
1 # bella-issues-bot
2 
3 - [![Static Badge](https://img.shields.io/badge/doc-deepwiki-blue?style=flat-square)](https://deepwiki.com/szl97/bella-issues-bot)
4 - [![Static Badge](https://img.shields.io/badge/support-BellaOpenAPI-%23C76300?style=flat-square)](https://github.com/LianjiaTech/bella-openapi)
5 
6 ## 项目简介
7 
8 bella-issues-bot 是一个基于人工智能的多功能代码开发助手，具备两种强大的工作模式：
9 
10 1. **个人开发助手模式**：在日常开发过程中，作为命令行工具辅助编码，帮助分析代码、生成实现、解决技术难题。
11 2. **GitHub自动化模式**：集成到GitHub工作流中，自动监控和处理项目Issues，无需人工干预即可分析需求、提出解决方案并实现代码变更。
12 
13 通过对项目结构的深入理解和强大的代码生成能力，bella-issues-bot 能够显著提高开发效率，减少重复工作，让您专注于更有创造性的任务。
14 
15 ## 主要功能
16 
17 - **需求分析**：自动理解和分解用户的功能需求，确定所需的代码修改
18 - **代码生成**：根据需求生成符合项目风格的代码，自动实现新功能或修复问题
19 - **版本管理**：与Git深度集成，支持分支创建、代码提交和拉取请求的自动管理
20 - **记忆系统**：记录项目文件描述和操作历史，提供上下文感知能力，持续改进代码质量
21 
22 ### 典型使用场景
23 
24 - **日常开发辅助**：在本地开发过程中，使用命令行工具快速生成代码、解决技术问题
25 - **项目自动化**：集成到GitHub工作流，实现Issue的自动处理和代码实现
26 - **代码文档生成**：自动分析项目文件并生成详细的功能描述
27 - **技术难题解决**：分析项目上下文后，针对性地提供解决方案
28 
29 ## 记忆与上下文管理
30 
31 bella-issues-bot 配备了强大的记忆系统，由三个核心组件构成：
32 
33 ### 记忆系统的工作流程
34 
35 1. **初始化阶段**：首次运行时，系统会扫描整个项目并为每个文件生成详细描述
36 2. **增量更新**：后续运行时，只会更新新增或修改的文件描述，提高效率
37 3. **上下文提取**：处理用户需求时，系统根据需求内容选择相关文件作为上下文
38 
39 ### 1. 日志管理 (LogManager)
40 
41 LogManager 负责记录每次交互的完整历史，包括：
42 - 系统提示词和用户需求
43 - AI响应内容
44 - 文件修改记录和差异对比
45 
46 这些日志按issue和轮次组织，支持历史追溯和问题诊断。每轮交互都会生成详细日志，便于追踪AI的决策过程和代码修改历史。
47 
48 ### 2. 版本管理 (VersionManager)
49 
50 VersionManager 提供智能的版本控制功能：
51 - 自动提取历史轮次的需求和响应
52 - 生成格式化的历史执行记录作为上下文
53 - 分析当前需求与历史需求的关系
54 - 根据需要执行版本回退操作
55 
56 系统会分析新需求与先前修改的关系，判断是否需要回滚，确保代码修改的连贯性和一致性。
57 
58 ### 3. 文件记忆 (FileMemory)
59 
60 FileMemory 模块为项目的每个文件维护详细描述：
61 - 自动生成文件功能、结构和关系描述
62 - 跟踪文件变更，更新受影响文件的描述
63 - 提供上下文相关的文件选择
64 - 支持配置忽略文件，默认包含项目的.gitignore，支持自定义添加.eng/.engignore
65 
66 这使得AI助手能够理解整个代码库的结构和功能，在修改代码时考虑到更广泛的项目上下文。
67 
68 ## 安装方法
69 
70 ### 通过 pip 安装
71 
72 ```bash
73 pip install bella-issues-bot
74 ```
75 
76 ### 从源码安装
77 
78 ```bash
79 git clone https://github.com/szl97/bella-issues-bot.git
80 cd bella-issues-bot
81 pip install -e .
82 ```
83 
84 ## 系统要求
85 
86 - Python 3.10 或更高版本（<3.13）
87 - Git 客户端（用于版本控制功能）
88 - OpenAI API 密钥（用于 AI 功能）
89 
90 ## 配置文件
91 
92 bella-issues-bot 支持多种配置方式：
93 
94 ### 环境变量配置
95 
96 工具会读取以下环境变量：
97 
98 - `OPENAI_API_KEY`: OpenAI API密钥（必需）
99 - `OPENAI_API_BASE`: OpenAI API基础URL（可选，用于自定义API端点）
100 - `GITHUB_REMOTE_URL`: GitHub远程仓库URL（可选，用于GitHub集成）
101 - `GITHUB_TOKEN`: GitHub身份验证令牌（可选，用于GitHub集成）
102 
103 ### 项目配置文件
104 
105 
106 - `.eng/system.txt`: 配置代码工程师的提示词
107 - `.eng/.engignore`: 类似于 `.gitignore`，用于指定文件记忆系统应忽略的文件
108 
109 示例 `.engignore` 文件:
110 ```
111 # 忽略所有日志文件
112 *.log
113 
114 # 忽略构建目录
115 /build/
116 /dist/
117 
118 # 忽略虚拟环境
119 /venv/
120 /.venv/
121 
122 # 忽略缓存文件
123 __pycache__/
124 *.py[cod]
125 *$py.class
126 ```
127 
128 ## 详细使用示例
129 
130 ### 0. 进入您的项目目录
131 
132 ### 1. 初始化文件记忆系统
133 
134 首次使用前，建议初始化文件记忆系统，这将帮助 AI 理解您的项目结构：
135 
136 ```bash
137 # 在项目根目录执行
138 bella-file-memory --project-dir .
139 ```
140 
141 这将分析您的项目文件并生成描述信息，存储在 `.eng/memory/file_details.txt` 中。
142 
143 ### 2. 作为个人开发助手使用
144 
145 ```bash
146 # 基本使用
147 bella-issues-bot --issue-id 123 --requirement "实现一个新的日志记录功能"
148 
149 # 使用自定义模型和温度
150 bella-issues-bot --issue-id 123 --requirement "优化文件读取性能" --core-model gpt-4o --core-temperature 0.5
151 ```
152 
153 ### 3. 设置 GitHub 工作流
154 
155 为您的项目生成 GitHub Actions 工作流配置：
156 
157 ```bash
158 # 生成默认工作流配置
159 bella-github-workflows
160 
161 # 自定义基础分支和模型
162 bella-github-workflows --base-branch develop --model gpt-4o
163 ```
164 
165 生成的工作流文件将保存在 `.github/workflows/` 目录中。
166 
167 ### 4. 使用编程 API
168 
169 ```python
170 from client.runner import run_workflow
171 
172 # 基本使用
173 run_workflow(
174     issue_id=123,
175     requirement="添加单元测试覆盖核心功能",
176     project_dir="./my_project"
177 )
178 
179 # 高级配置
180 run_workflow(
181     issue_id=123,
182     requirement="重构数据处理模块以提高性能",
183     project_dir="./my_project",
184     core_model="gpt-4o",
185     data_model="gpt-4o",
186     core_temperature=0.7,
187     data_temperature=0.5,
188     mode="client",  # 或 "bot" 用于 GitHub 自动化
189     max_retry=5
190 )
191 ```
192 
193 ## 项目结构
194 
195 ```
196 bella-issues-bot/
197 ├── core/               # 核心功能模块
198 │   ├── ai.py           # AI 助手接口
199 │   ├── file_memory.py  # 文件记忆系统
200 │   ├── git_manager.py  # Git 版本控制
201 │   └── workflow_engine.py  # 工作流引擎
202 ├── client/             # 客户端接口
203 │   ├── terminal.py     # 命令行界面
204 │   ├── file_memory_client.py  # 文件记忆客户端
205 │   └── github_workflow_generator.py  # GitHub 工作流生成器
206 └── examples/           # 使用示例
207 ```
208
```




```
File: quick-start.md
1 # bella-issues-bot 使用指南
2 
3 在GitHub上使用bella-issues-bot项目，您可以执行以下主要操作：
4 
5 ## 1. 作为个人开发助手
6 
7 ### 安装项目
8 ```bash
9 # 通过pip安装
10 pip install bella-issues-bot
11 
12 # 或从源码安装
13 git clone https://github.com/szl97/bella-issues-bot.git
14 cd bella-issues-bot
15 pip install -e .
16 ```
17 
18 ### 初始化文件记忆系统
19 ```bash
20 # 分析您的项目文件并生成描述信息
21 bella-file-memory --project-dir ./your-project
22 ```
23 
24 ### 使用AI助手处理需求
25 ```bash
26 # 基本使用 - 提出问题或请求代码修改
27 bella-issues-bot --issue-id 123 --requirement "实现一个新的日志记录功能"
28 
29 # 自定义模型和温度
30 bella-issues-bot --issue-id 123 --requirement "优化文件读取性能" --core-model gpt-4o --core-temperature 0.5
31 ```
32 
33 ## 2. 集成GitHub工作流
34 
35 ### 生成GitHub Actions工作流配置
36 ```bash
37 # 生成默认配置
38 bella-github-workflows
39 
40 # 自定义基础分支和模型
41 bella-github-workflows --base-branch develop --model gpt-4o
42 ```
43 
44 这将在`.github/workflows/`目录中创建两个工作流文件：
45 - `memory_init.yml` - 自动分析项目文件并维护文件记忆
46 - `issue_process.yml` - 自动处理Issue中的需求
47 
48 ### 配置GitHub仓库权限
49 
50 在仓库的Settings中设置：
51 1. 添加必要的Secrets（`OPENAI_API_KEY`）
52 2. 启用Actions的读写权限和PR创建权限
53 
54 ## 3. 使用GitHub Issues获取AI协助
55 
56 一旦集成了GitHub工作流，您可以：
57 
58 1. 创建一个新Issue描述您的需求
59 2. AI助手会自动：
60     - 分析您的需求
61     - 在专用分支上实现代码
62     - 创建拉取请求
63     - 在Issue中回复处理结果
64 
65 ## 4. 使用编程API
66 
67 在Python代码中使用：
68 
69 ```python
70 from client.runner import run_workflow
71 
72 # 处理需求并生成代码
73 run_workflow(
74     issue_id=123,
75     requirement="添加单元测试覆盖核心功能",
76     project_dir="./my_project",
77     core_model="gpt-4o"
78 )
79 ```
80 
81 ## 5. 配置项目
82 
83 ### 环境变量设置
84 ```
85 OPENAI_API_KEY=your_api_key
86 OPENAI_API_BASE=https://api.openai.com/v1  # 可选，自定义API端点
87 GITHUB_REMOTE_URL=https://github.com/username/repo.git  # 用于GitHub集成
88 GITHUB_TOKEN=your_github_token  # 用于GitHub集成
89 ```
90 
91 ### 项目配置文件
92 - `.eng/system.txt` - 自定义AI提示词
93 - `.eng/.engignore` - 类似`.gitignore`，指定记忆系统应忽略的文件
94 
95 bella-issues-bot提供了强大的AI代码开发助手功能，无论是作为个人开发工具还是GitHub自动化机器人，都能显著提高开发效率，减少重复工作。
```




```
File: client/README_GITHUB_WORKFLOWS.md
1 # GitHub工作流生成器
2 
3 bella-issues-bot 提供了自动生成 GitHub Actions 工作流配置的功能，可以轻松将 AI 助手集成到您的 GitHub 项目中。
4 
5 ## 功能概述
6 
7 工作流生成器会创建两个GitHub Actions工作流文件：
8 
9 1. **记忆初始化工作流** (`memory_init.yml`)
10    - 当指定分支有推送时触发
11    - 会跳过机器人自身的提交（通过检查提交信息中的"Update file memory"）
12    - 分析项目文件并生成文件描述
13    - 将记忆文件提交回仓库
14 
15 2. **Issue处理工作流** (`issue_process.yml`)
16    - 在创建新Issue或添加评论时触发
17    - 自动提取Issue或评论中的需求
18    - 在专用分支上处理需求并实现代码
19    - 创建拉取请求，提供解决方案
20    - 在Issue中添加处理结果的评论
21 
22 ## 命令行使用方式
23 
24 运行以下命令生成GitHub工作流文件：
25 
26 ```bash
27 # 基本用法 - 使用默认配置
28 bella-github-workflows
29 
30 # 指定基础分支
31 bella-github-workflows --base-branch develop
32 
33 # 自定义模型和温度
34 bella-github-workflows --model gpt-4o --temperature 0.5
35 ```
36 
37 ### 命令行参数
38 
39 - `--output-dir`, `-o`: 输出目录，默认为 `.github/workflows`
40 - `--base-branch`, `-bb`: 拉取请求的目标分支，默认为 `main`
41 - `--model`, `-m`: 默认 AI 模型，默认为 `gpt-4o`
42 - `--core-model`, `--cm`: 核心操作使用的模型（如果与默认模型不同）
43 - `--data-model`, `--dm`: 数据操作使用的模型（如果与默认模型不同）
44 - `--temperature`, `-t`: 默认温度设置，默认为 `0.7`
45 - `--core-temperature`, `--ct`: 核心模型的温度（如果与默认温度不同）
46 - `--data-temperature`, `--dt`: 数据模型的温度（如果与默认温度不同）
47 - `--package-version`, `-v`: 指定安装的包版本，例如 `==0.1.1`
48 
49 ### 记忆初始化工作流 (`memory_init.yml`)
50 
51 此工作流在指定分支有推送时运行，它：
52 1. 检查提交是否由自动化机器人产生（含有"Update file memory"的提交信息）
53    - 如果是机器人提交，则会跳过执行，防止无限循环
54    - 可以通过workflow_dispatch手动触发并强制执行
55 2. 检出代码库
56 3. 设置Python环境
57 4. 安装bella-issues-bot
58 5. 初始化文件记忆系统，生成项目文件描述
59 6. 将生成的记忆文件提交回仓库（提交信息带有[skip memory]标记）
60 
61 ### Issue处理工作流 (`issue_process.yml`)
62 
63 此工作流在创建新Issue或添加评论时运行，具体步骤如下：
64 1. 检出代码库
65 2. 设置Python环境
66 3. 安装bella-issues-bot
67 4. 提取Issue或评论中的需求
68 5. 运行bella-issues-bot处理需求（它会自动创建分支并提交代码）
69    - 如果评论以"bella-issues-bot已处理："开头，则跳过处理
70 6. 创建拉取请求
71 7. 在Issue中添加处理结果的评论
72 
73 ## GitHub配置要求
74 
75 要使这些工作流正常运行，您需要在GitHub仓库的设置中配置以下内容：
76 
77 ### 1. Secrets 配置
78 
79 在仓库的 Settings > Secrets and variables > Actions 中添加以下 secrets：
80 
81 - `OPENAI_API_KEY`: 您的OpenAI API密钥（必需）
82 - `OPENAI_API_BASE`: 自定义API基础URL（可选）
83 - `GITHUB_TOKEN`: GitHub自动提供，无需手动配置
84 
85 ### 2. 权限设置
86 
87 在仓库的 Settings > Actions > General > Workflow permissions 中：
88 
89 - 选择 "Read and write permissions"
90 - 勾选 "Allow GitHub Actions to create and approve pull requests"
91 
92 ## 工作流文件详解
93 
94 ### 记忆初始化工作流 (`memory_init.yml`)
95 
96 ```yaml
97 name: Initialize File Memory
98 
99 on:
100   workflow_dispatch:  # 允许手动触发
101     inputs:
102       force_run:
103         description: '强制执行，即使是自动提交'
104   push:
105     branches:
106       - main  # 可自定义为您的默认分支
107 
108 jobs:
109   init-memory:
110     runs-on: ubuntu-latest
111     permissions:
112       contents: write
113     if: ${{ !contains(github.event.head_commit.message, '[skip memory]') || github.event_name == 'workflow_dispatch' }}
114     steps:
115       - name: 检出代码
116         uses: actions/checkout@v3
117         with:
118           fetch-depth: 0
119 
120       - name: 设置Python环境
121         uses: actions/setup-python@v4
122         with:
123           python-version: '3.10'
124           
125       - name: 安装依赖
126         run: pip install bella-issues-bot
127         
128       - name: 初始化文件记忆
129         env:
130            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
131            OPENAI_API_BASE: ${{ secrets.OPENAI_API_BASE }}
132            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
133            GIT_REMOTE: ${{ github.server_url }}/${{ github.repository }}
134         run: bella-file-memory \
135               --mode bot \
136               --model gpt-4o \
137               -u "https://api.openai.com/v1" \
138               -k "sk-xxxxx" \
139               --git-url "https://github.com/szl97/bella-issues-bot.git" \
140               --git-token "githubxxxxx"
141 ```
142 
143 ### Issue处理工作流 (`issue_process.yml`)
144 
145 ```yaml
146 name: Process Issues with AI
147 
148 on:
149   issues:
150     types: [opened]
151   issue_comment:
152     types: [created]
153 
154 jobs:
155   process-issue:
156     runs-on: ubuntu-latest
157     if: ${{ !startsWith(github.event.comment.body, 'bella-issues-bot已处理：') }}
158     permissions:
159       contents: write
160       pull-requests: write
161       issues: write
162     steps:
163       - name: 检出代码
164         uses: actions/checkout@v3
165         with:
166           fetch-depth: 0
167           
168       - name: 设置Python环境
169         uses: actions/setup-python@v4
170         with:
171           python-version: '3.10'
172           
173       - name: 安装依赖
174         run: pip install bella-issues-bot
175         
176       - name: 处理Issue
177         env:
178            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
179            OPENAI_API_BASE: ${{ secrets.OPENAI_API_BASE }}
180            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
181            GIT_REMOTE: ${{ github.server_url }}/${{ github.repository }}
182         run: |
183           # 提取Issue ID和需求
184           ISSUE_ID=${{ github.event.issue.number }}
185           REQUIREMENT="${{ github.event.issue.body || github.event.comment.body }}"
186           
187           # 运行bella-issues-bot处理需求
188           bella-issues-bot \
189             --issue-id $ISSUE_ID \
190             --requirement "$REQUIREMENT" \
191             --mode bot \
192             -u "https://api.openai.com/v1" \
193             -k "sk-xxxxx" \
194             --git-url "https://github.com/szl97/bella-issues-bot.git" \
195             --git-token "githubxxxxx"
196 ```
197 
198 ## 使用场景
199 
200 ### 1. 自动化需求实现
201 
202 当用户在GitHub Issues中提出新功能需求或报告bug时，bella-issues-bot可以：
203 - 自动分析需求
204 - 实现所需的代码更改
205 - 创建拉取请求
206 - 在Issue中提供详细的解决方案说明
207 
208 ### 2. 代码文档维护
209 
210 每当有新代码推送到主分支时，bella-issues-bot可以：
211 - 分析新增或修改的文件
212 - 更新文件功能描述
213 - 维护项目的知识库
214 
215 ### 3. 技术支持自动化
216 
217 当用户在Issues中提出技术问题时，bella-issues-bot可以：
218 - 分析问题
219 - 提供解决方案
220 - 生成示例代码
221 - 自动回复用户
222 
223 ## 自定义工作流
224 
225 您可以根据项目需求自定义工作流文件。以下是一些常见的自定义场景：
226 
227 ### 1. 触发条件自定义
228 
229 您可以修改工作流的触发条件，例如：
230 - 限制特定标签的Issues
231 - 只在特定分支上运行
232 - 添加定时触发
233 
234 ```yaml
235 on:
236   issues:
237     types: [opened, labeled]
238   issue_comment:
239     types: [created]
240   schedule:
241     - cron: '0 0 * * 1'  # 每周一运行
242 ```
243 
244 ### 2. 环境自定义
245 
246 您可以自定义Python版本或添加其他环境依赖：
247 
248 ```yaml
249 - name: 设置Python环境
250   uses: actions/setup-python@v4
251   with:
252     python-version: '3.11'
253     
254 - name: 安装额外依赖
255   run: |
256     pip install bella-issues-bot
257     pip install your-additional-package
258 ```
259 
260 ### 3. 通知自定义
261 
262 您可以添加Slack、Email或其他通知方式：
263 
264 ```yaml
265 - name: 发送Slack通知
266   uses: 8398a7/action-slack@v3
267   with:
268     status: ${{ job.status }}
269     fields: repo,message,commit,author,action,eventName,ref,workflow
270   env:
271     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
272   if: always()
273 ```
274 
275 ## 故障排除
276 
277 ### 常见问题
278 
279 1. **权限问题**：确保工作流有适当的权限（contents、issues、pull-requests）
280 2. **API密钥问题**：检查OPENAI_API_KEY是否正确设置
281 3. **提交循环**：如果遇到无限提交循环，检查提交消息过滤逻辑
282 4. **超时问题**：对于大型项目，可能需要增加工作流超时限制
283 
284 ### 日志和调试
285 
286 GitHub Actions提供了详细的日志，您可以在Actions标签页中查看每次运行的详细日志。
287 
288 ## 最佳实践
289 
290 1. **明确需求格式**：在项目文档中说明如何编写Issue以获得最佳结果
291 2. **定期更新依赖**：确保使用最新版本的bella-issues-bot
292 3. **审查自动生成的代码**：虽然AI生成的代码通常很好，但人工审查仍然重要
293 4. **设置适当的标签**：使用标签来标记适合AI处理的Issues
294 
295 ## 相关文档
296 
297 - [主项目文档](../README.md)
298 - [文件记忆系统文档](./README_FILE_MEMORY.md)
299 - [客户端文档](./README.md)
300
```




```
File: client/github_workflow_generator.py
1 """
2 GitHub Workflow Generator
3 
4 A module for generating GitHub Actions workflow files to integrate bella-issues-bot with GitHub.
5 Creates two workflows:
6 1. File Memory Initialization - Triggered on push to a configurable branch
7 2. Issue Processing Bot - Triggered when issues are created or commented on
8 """
9 
10 import argparse
11 import os
12 import sys
13 from pathlib import Path
14 from typing import Dict, Optional
15 
16 from core.log_config import get_logger, setup_logging
17 
18 logger = get_logger(__name__)
19 
20 # Template for memory initialization workflow
21 MEMORY_INIT_TEMPLATE = """name: Initialize File Memory
22 
23 on:
24   workflow_dispatch:  # Allow manual triggering
25     inputs:
26       force_run:
27         description: 'Force execution even for automated commits'
28   push:
29     branches:
30       - {branch}
31 
32 jobs:
33   init-memory:
34     runs-on: ubuntu-latest
35     permissions:
36       contents: write
37     if: ${{{{ !contains(github.event.head_commit.message, '[skip memory]') || github.event_name == 'workflow_dispatch' }}}}
38     steps:
39       - name: Checkout code
40         uses: actions/checkout@v3
41         with:
42           fetch-depth: 0
43 
44       - name: Set up Python
45         uses: actions/setup-python@v4
46         with:
47           python-version: '3.10'
48 
49       - name: Install bella-issues-bot
50         run: |
51           python -m pip install --upgrade pip
52           pip install bella-issues-bot{package_version}
53 
54       - name: Initialize file memory
55         env:
56           OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}
57           OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}
58           GIT_REMOTE: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}
59           GITHUB_TOKEN: ${{{{ secrets.GIT_TOKEN }}}}
60         run: |
61           bella-file-memory --mode bot -b {branch} -m {model} -t {temperature} --git-url "${{{{ github.server_url }}}}/${{{{ github.repository }}}}" --git-token "${{{{ secrets.GIT_TOKEN }}}}" -u "${{{{ secrets.OPENAI_API_BASE }}}}" -k "${{{{ secrets.OPENAI_API_KEY }}}}"
62 """
63 
64 # Template for issue processing workflow
65 ISSUE_PROCESS_TEMPLATE = """name: Process Issues with bella-issues-bot
66 
67 on:
68   issues:
69     types: [opened]
70   issue_comment:
71     types: [created]
72 
73 jobs:
74   process-issue:
75     runs-on: ubuntu-latest
76     permissions:
77       contents: write
78       issues: write
79     if: ${{{{ github.event_name == 'issues' || !startsWith(github.event.comment.body, 'bella-issues-bot已处理：') }}}}
80     steps:
81       - name: Checkout code
82         uses: actions/checkout@v3
83         with:
84           fetch-depth: 0
85 
86       - name: Set up Python
87         uses: actions/setup-python@v4
88         with:
89           python-version: '3.10'
90 
91       - name: Install bella-issues-bot
92         run: |
93           python -m pip install --upgrade pip
94           pip install bella-issues-bot{package_version}
95 
96       - name: Extract issue info
97         id: issue
98         run: |
99           if [[ "${{{{ github.event_name }}}}" == "issues" ]]; then
100             echo "issue_id=${{{{ github.event.issue.number }}}}" >> $GITHUB_OUTPUT
101             echo "requirement<<EOF" >> $GITHUB_OUTPUT
102             echo "${{{{ github.event.issue.body }}}}" >> $GITHUB_OUTPUT
103             echo "EOF" >> $GITHUB_OUTPUT
104           else
105             echo "issue_id=${{{{ github.event.issue.number }}}}" >> $GITHUB_OUTPUT
106             echo "requirement<<EOF" >> $GITHUB_OUTPUT
107             echo "${{{{ github.event.comment.body }}}}" >> $GITHUB_OUTPUT
108             echo "EOF" >> $GITHUB_OUTPUT
109           fi
110 
111       - name: Process issue with bella-issues-bot
112         env:
113           OPENAI_API_KEY: ${{{{ secrets.OPENAI_API_KEY }}}}
114           OPENAI_API_BASE: ${{{{ secrets.OPENAI_API_BASE }}}}
115           GIT_REMOTE: ${{{{ github.server_url }}}}/${{{{ github.repository }}}}
116           GITHUB_TOKEN: ${{{{ secrets.GIT_TOKEN }}}}
117           ISSUE_ID: ${{{{ steps.issue.outputs.issue_id }}}}
118         run: |
119           # Run bella-issues-bot in bot mode - it will handle branch creation and pushing
120           bella-issues-bot --mode bot -b {base_branch} --issue-id ${{{{ steps.issue.outputs.issue_id }}}} --core-model {core_model} --data-model {data_model} --core-temperature {core_temperature} --data-temperature {data_temperature} --requirement "${{{{ steps.issue.outputs.requirement }}}}" --git-url "${{{{ github.server_url }}}}/${{{{ github.repository }}}}" --git-token "${{{{ secrets.GIT_TOKEN }}}}" -u "${{{{ secrets.OPENAI_API_BASE }}}}" -k "${{{{ secrets.OPENAI_API_KEY }}}}"
121 """
122 
123 def generate_workflow_files(
124     output_dir: str,
125     base_branch: str = "main",
126     model: str = "gpt-4o",
127     core_model: Optional[str] = None,
128     data_model: Optional[str] = None,
129     temperature: float = 0.7,
130     core_temperature: Optional[float] = None,
131     data_temperature: Optional[float] = None,
132     package_version: str = ""
133 ) -> Dict[str, str]:
134     """
135     Generate GitHub workflow YAML files.
136     
137     Args:
138         output_dir: Directory to write workflow files
139         base_branch: Base branch for pull requests
140         model: Default model to use for all operations
141         core_model: Model for core operations (if different from model)
142         data_model: Model for data operations (if different from model)
143         temperature: Default temperature setting for all models
144         core_temperature: Temperature for core model (if different)
145         data_temperature: Temperature for data model (if different)
146         package_version: Specific version of package to install (e.g. "==0.1.1")
147         
148     Returns:
149         Dictionary mapping file paths to their contents
150     """
151     workflows_dir = os.path.join(output_dir, ".github", "workflows")
152     os.makedirs(workflows_dir, exist_ok=True)
153     
154     # Format version specification if provided
155     if package_version and not package_version.startswith("=="):
156         package_version = f"=={package_version}"
157     
158     # Use provided models or default to the general model
159     actual_core_model = core_model or model
160     actual_data_model = data_model or model
161     
162     # Use provided temperatures or default to the general temperature
163     actual_core_temp = core_temperature if core_temperature is not None else temperature
164     actual_data_temp = data_temperature if data_temperature is not None else temperature
165     
166     # Generate memory initialization workflow
167     memory_workflow_path = os.path.join(workflows_dir, "memory_init.yml")
168     memory_workflow_content = MEMORY_INIT_TEMPLATE.format(
169         branch=base_branch,
170         model=actual_data_model,
171         temperature=actual_data_temp,
172         package_version=package_version
173     )
174     
175     # Generate issue processing workflow
176     issue_workflow_path = os.path.join(workflows_dir, "issue_process.yml")
177     issue_workflow_content = ISSUE_PROCESS_TEMPLATE.format(
178         core_model=actual_core_model,
179         data_model=actual_data_model,
180         core_temperature=actual_core_temp,
181         data_temperature=actual_data_temp,
182         base_branch=base_branch,
183         package_version=package_version
184     )
185     
186     # Write the files
187     with open(memory_workflow_path, 'w') as f:
188         f.write(memory_workflow_content)
189     
190     with open(issue_workflow_path, 'w') as f:
191         f.write(issue_workflow_content)
192     
193     logger.info(f"Generated workflow files in {workflows_dir}")
194     
195     return {
196         memory_workflow_path: memory_workflow_content,
197         issue_workflow_path: issue_workflow_content
198     }
199 
200 def main() -> None:
201     """Command line interface for GitHub workflow generator."""
202     parser = argparse.ArgumentParser(description="Generate GitHub Actions workflows for bella-issues-bot integration")
203     parser.add_argument("--output", "-o", type=str, default=".", help="Output directory (default: current directory)")
204     parser.add_argument("--base-branch", "-b", type=str, default="main", help="Base branch for pull requests (default: main)")
205     parser.add_argument("--model", "-m", type=str, default="gpt-4o", help="Default model for all operations (default: gpt-4o)")
206     parser.add_argument("--core-model", "--cm", type=str, help="Model for core operations (defaults to --model)")
207     parser.add_argument("--data-model", "--dm", type=str, help="Model for data operations (defaults to --model)")
208     parser.add_argument("--temperature", "-t", type=float, default=0.7, help="Default temperature for all models (default: 0.7)")
209     parser.add_argument("--core-temperature", "--ct", type=float, help="Temperature for core model (defaults to --temperature)")
210     parser.add_argument("--data-temperature", "--dt", type=float, help="Temperature for data model (defaults to --temperature)")
211     parser.add_argument("--package-version", "-v", type=str, default="", help="Specific package version to install (e.g. '0.1.1')")
212     parser.add_argument("--log-level", "-l", type=str, choices=["DEBUG", "INFO", "WARNING", "ERROR"], default="INFO", help="Logging level")
213     
214     args = parser.parse_args()
215     
216     # Setup logging
217     import logging
218     setup_logging(log_level=getattr(logging, args.log_level))
219     
220     # Generate workflow files
221     try:
222         generate_workflow_files(
223             output_dir=args.output,
224             base_branch=args.base_branch,
225             model=args.model,
226             core_model=args.core_model,
227             data_model=args.data_model,
228             temperature=args.temperature,
229             core_temperature=args.core_temperature,
230             data_temperature=args.data_temperature,
231             package_version=args.package_version
232         )
233         logger.info("Successfully generated GitHub workflow files")
234     except Exception as e:
235         logger.error(f"Error generating workflow files: {str(e)}")
236         sys.exit(1)
237 
238 if __name__ == "__main__":
239     main()
240
```




```
File: scripts/generate_workflows.sh
1 #!/bin/bash
2 
3 # Script to generate GitHub workflow files for bella-issues-bot integration
4 # This script provides a simple interface to the workflow generator
5 
6 show_help() {
7     echo "Usage: $0 [options]"
8     echo ""
9     echo "Options:"
10     echo "  -o, --output DIR        Output directory (default: current directory)"
11     echo "  -b, --base-branch      Base branch for pull requests (default: main) "
12     echo "  -m, --model MODEL       Default model for all operations (default: gpt-4o)"
13     echo "  -t, --temp VALUE        Default temperature setting (default: 0.7)"
14     echo "  -v, --version VERSION   Specific package version to install (e.g. '0.1.1')"
15     echo "  -h, --help              Show this help message"
16     echo ""
17     echo "Additional options like --core-model, --data-model, etc. are also supported."
18     echo "Run 'bella-github-workflows --help' for complete details."
19     echo ""
20 }
21 
22 # Check if script can be executed on current system
23 check_requirements() {
24     if ! command -v python &> /dev/null; then
25         echo "Error: Python is required but not found"
26         exit 1
27     fi
28 }
29 check_requirements
30 
31 if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
32     show_help
33     exit 0
34 fi
35 
36 # Pass all arguments to the Python module
37 python -m client.github_workflow_generator "$@"
38
```




```
File: scripts/init_file_memory.sh
1 #!/bin/bash
2 
3 # Script to initialize file memory using GitManager (without LogManager)
4 # This script helps to run the bella-file-memory command with common options
5 
6 show_help() {
7     echo "Usage: $0 [options]"
8     echo ""
9     echo "Options:"
10     echo "  -d, --directory DIR    Set project directory (default: current directory)"
11     echo "  -m, --model MODEL      Set AI model (default: gpt-4o)"
12     echo "  -t, --temp VALUE       Set temperature (default: 0.7)"
13     echo "  -f, --failed-only      Process only previously failed files"
14     echo "  -h, --help             Show this help message"
15     echo ""
16 }
17 
18 if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
19     show_help
20     exit 0
21 fi
22 
23 # Pass all arguments to the Python module
24 python -m client.file_memory_client "$@"
25 
26 # Exit with the same status code as the Python command
27 exit $?
28
```




```
File: scripts/run_bot.sh
1 #!/bin/bash
2 
3 # 启动bella-issues-bot的帮助脚本
4 # 此脚本简化了命令行参数的输入，便于快速使用
5 # 支持简化的参数选项，调用Python客户端模块
6 
7 show_help() {
8     echo "使用方法: $0 <issue-id> [选项] [需求文件路径]"
9     echo ""
10     echo "必需参数:"
11     echo "  <issue-id>               问题ID（必填）"
12     echo ""
13     echo "选项:"
14     echo "  -m, --model MODEL        同时设置core和data模型名称"
15     echo "  -t, --temperature TEMP          同时设置core和data模型温度"
16     echo "  --cm, --core-model MODEL 单独设置core模型名称"
17     echo "  --dm, --data-model MODEL 单独设置data模型名称"
18     echo "  --ct, --core-temperature TEMP   单独设置core模型温度"
19     echo "  --dt, --data-temperature TEMP   单独设置data模型温度"
20     echo "  -k, --key KEY            设置API密钥"
21     echo "  -h, --help               显示此帮助信息"
22     echo ""
23     echo "示例:"
24     echo "  $0 42 ./requirements.txt             # 使用文件中的需求"
25     echo "  $0 42 -m gpt-4-turbo                # 设置所有模型为gpt-4-turbo"
26     echo "  $0 42 -m gpt-4-turbo -t 0.9         # 设置所有模型为gpt-4-turbo，温度为0.9"
27     echo "  $0 42 --cm gpt-4-turbo --dm gpt-3.5-turbo  # 分别设置不同模型"
28     echo ""
29 }
30 
31 # 检查是否请求帮助
32 if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
33     show_help
34     exit 0
35 fi
36 
37 # 检查是否提供了issue-id参数
38 if [ -z "$1" ] || [[ "$1" == -* ]]; then
39     echo "错误: 必须提供issue-id作为第一个参数"
40     show_help
41     exit 1
42 fi
43 
44 ISSUE_ID=$1
45 shift  # 移除第一个参数，使其他参数可以按顺序处理
46 
47 # 检查最后一个参数是否是一个文件（不以连字符开头）
48 ARGS=("$@")
49 if [ ${#ARGS[@]} -gt 0 ] && [[ ! "${ARGS[-1]}" == -* ]] && [ -f "${ARGS[-1]}" ]; then
50     python -m client.terminal -i $ISSUE_ID --requirement-file "${ARGS[-1]}" "${ARGS[@]:0:${#ARGS[@]}-1}"
51 else
52     python -m client.terminal -i $ISSUE_ID "$@"
53 fi
54
```




```
File: pyproject.toml
1 [tool.poetry]
2 name = "bella-issues-bot"
3 version = "0.1.17"
4 description = "bella-issues-bot 是一个基于人工智能的多功能代码开发助手，具备两种强大的工作模式：个人开发助手模式：在日常开发过程中，作为命令行工具辅助编码，帮助分析代码、生成实现、解决技术难题。GitHub自动化模式：集成到GitHub工作流中，自动监控和处理项目Issues，无需人工干预即可分析需求、提出解决方案并实现代码变更。"
5 authors = ["saizhuolin"]
6 license = "MIT"
7 readme = "README.md"
8 homepage = "https://github.com/szl97/bella-issues-bot"
9 repository = "https://github.com/szl97/bella-issues-bot"
10 documentation = "https://github.com/szl97/bella-issues-bot"
11 packages = [
12     {include = "core"},
13     {include = "client"}
14 ]
15 classifiers = [
16   "Development Status :: 4 - Beta",
17   "Topic :: Scientific/Engineering :: Artificial Intelligence",
18 ]
19 
20 [build-system]
21 requires = ["poetry-core>=1.0.0"]
22 build-backend = "poetry.core.masonry.api"
23 
24 [tool.poetry.dependencies]
25 python = ">=3.10,<3.13"
26 gitpython = "^3.1.40"
27 PyGithub = "^2.1.1"
28 langchain = ">=0.3.0,<0.4.0"
29 langchain-openai = ">=0.1.0"
30 langchain-core = ">=0.3.0,<0.4.0"
31 langchain-community = ">=0.3.0,<0.4.0"
32 python-dotenv = "^1.0.0"
33 pydantic = "^2.5.0"
34 openai = "^1.3.5"
35 pytest = "^7.4.0"
36 pathspec = ">=0.9.0"
37 toml = ">=0.10.2"
38 typing-extensions = ">=4.0.0"
39 jinja2 = ">=3.1.0,<4.0.0"
40 colorlog = ">=6.8.0,<7.0.0"
41 colorama = ">=0.4.4"
42 argparse = ">=1.4.0"
43 pyyaml = ">=6.0"
44 
45 [tool.poetry.scripts]
46 bella-issues-bot = 'client.terminal:run_workflow_from_terminal'
47 bella-file-memory = 'client.file_memory_client:main'
48 bella-github-workflows = 'client.github_workflow_generator:main'
49 
50 [tool.ruff]
51 select = ["F", "E", "W", "I001"]
52 show-fixes = false
53 target-version = "py310"
54 task-tags = ["TODO", "FIXME"]
55 extend-ignore = ["E501", "E722"]
56 
57 [tool.black]
58 target-version = ["py310"]
59 
60 [tool.ruff.isort]
61 known-first-party = []
62 known-third-party = []
63 section-order = [
64   "future",
65   "standard-library",
66   "third-party",
67   "first-party",
68   "local-folder",
69 ]
70 combine-as-imports = true
71 split-on-trailing-comma = false
72 lines-between-types = 1
73
```




# 用户需求

在GitHub中使用这个项目，需要执行哪些操作？