[
  {
    "file_name": "examples/example_decision_process.py",
    "content": "diff\n--- /dev/null\n+++ examples/example_decision_process.py\n@@ -0,0 +1,97 @@\n+\"\"\"\n+本示例展示如何使用DecisionProcess进行需求分析和决策\n+\n+DecisionProcess能够分析用户需求并确定处理流程：\n+1. 判断需求是否需要修改代码\n+2. 提供分析结果和推理过程\n+3. 帮助系统决定使用代码生成流程还是对话流程\n+\"\"\"\n+\n+import logging\n+import os\n+\n+from dotenv import load_dotenv\n+\n+from core.ai import AIConfig\n+from core.decision import DecisionProcess, DecisionResult\n+from core.git_manager import GitManager, GitConfig\n+from core.log_config import setup_logging, get_logger\n+from core.log_manager import LogManager, LogConfig\n+from core.version_manager import VersionManager\n+\n+logger = get_logger(__name__)\n+\n+\n+def main():\n+    \"\"\"主函数：演示DecisionProcess的使用流程\"\"\"\n+    setup_logging(log_level=logging.INFO)\n+    # 加载环境变量\n+    load_dotenv()\n+    \n+    # 创建工作目录\n+    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../.\"))\n+\n+    # 设置issue_id\n+    issue_id = 20\n+    \n+    # 初始化必要组件\n+    log_config = LogConfig(project_dir=project_dir, issue_id=issue_id)\n+    log_manager = LogManager(config=log_config)\n+    \n+    git_config = GitConfig(repo_path=project_dir)\n+    git_manager = GitManager(config=git_config)\n+    \n+    ai_config = AIConfig(\n+        model_name=\"gpt-4o\",\n+        temperature=0.7\n+    )\n+    \n+    # 初始化版本管理器 (DecisionProcess需要)\n+    version_manager = VersionManager(\n+        issue_id=issue_id,\n+        log_manager=log_manager,\n+        git_manager=git_manager,\n+        ai_config=ai_config\n+    )\n+    \n+    # 初始化决策分析器\n+    print(\"\\n1. 初始化决策分析器\")\n+    decision_process = DecisionProcess(\n+        ai_config=ai_config,\n+        version_manager=version_manager\n+    )\n+    \n+    # 准备示例需求\n+    example_requirements = [\n+        # 需要修改代码的需求\n+        \"在项目中添加一个新的模块，用于处理用户配置文件\",\n+        \"修复file_memory.py中的内存泄漏问题\",\n+        \"将log_manager模块重构为单例模式\",\n+        \"把这两个文件合并成一个吧：example_chat_process.py和example_code_generate.py\",\n+        # 不需要修改代码的需求\n+        \"请解释一下workflow_engine.py的主要功能\",\n+        \"你能告诉我如何使用version_manager吗？\",\n+        \"为什么决策模块需要用到AI助手？\",\n+        \"代码中的AIConfig和LLMConfig有什么区别？\"\n+    ]\n+    \n+    # 分析每个示例需求\n+    print(\"\\n2. 开始分析示例需求\")\n+    for i, requirement in enumerate(example_requirements):\n+        print(f\"\\n示例 {i+1}: {requirement}\")\n+        \n+        # 使用决策分析器分析需求\n+        result: DecisionResult = decision_process.analyze_requirement(requirement)\n+        \n+        # 输出分析结果\n+        result_type = \"需要修改代码\" if result.needs_code_modification else \"只需要对话回答\"\n+        print(f\"分析结果: {result_type}\")\n+        print(f\"分析理由: {result.reasoning}\")\n+        \n+        # 基于分析结果选择处理流程\n+        if result.needs_code_modification:\n+            print(\"-> 应使用CodeEngineer处理\")\n+        else:\n+            print(\"-> 应使用ChatProcessor处理\")\n+\n+if __name__ == \"__main__\":\n+    main()\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "examples/advanced/decision_workflow_integration.py",
    "content": "diff\n--- /dev/null\n+++ examples/advanced/decision_workflow_integration.py\n@@ -0,0 +1,88 @@\n+\"\"\"\n+高级示例：决策流程与工作流集成\n+\n+演示如何将DecisionProcess集成到自定义工作流中，实现智能路由需求处理\n+\"\"\"\n+\n+import logging\n+import os\n+from typing import Dict, Any\n+\n+from dotenv import load_dotenv\n+\n+from core.ai import AIConfig\n+from core.chat_processor import ChatProcessor, ChatProcessorConfig\n+from core.code_engineer import CodeEngineer, CodeEngineerConfig\n+from core.decision import DecisionProcess\n+from core.diff import Diff\n+from core.git_manager import GitManager, GitConfig\n+from core.log_config import setup_logging, get_logger\n+from core.log_manager import LogManager, LogConfig\n+from core.version_manager import VersionManager\n+\n+logger = get_logger(__name__)\n+\n+\n+class SmartWorkflowHandler:\n+    \"\"\"智能工作流处理器，根据决策结果选择合适的处理流程\"\"\"\n+    \n+    def __init__(self, config: Dict[str, Any]):\n+        \"\"\"初始化智能工作流处理器\"\"\"\n+        self.project_dir = config.get('project_dir')\n+        self.issue_id = config.get('issue_id')\n+        \n+        # 初始化基础组件\n+        log_config = LogConfig(project_dir=self.project_dir, issue_id=self.issue_id)\n+        self.log_manager = LogManager(config=log_config)\n+        \n+        git_config = GitConfig(repo_path=self.project_dir)\n+        self.git_manager = GitManager(config=git_config)\n+        \n+        self.ai_config = AIConfig(\n+            model_name=config.get('model_name', 'gpt-4o'),\n+            temperature=config.get('temperature', 0.7)\n+        )\n+        \n+        # 初始化版本管理器\n+        self.version_manager = VersionManager(\n+            issue_id=self.issue_id,\n+            log_manager=self.log_manager,\n+            git_manager=self.git_manager,\n+            ai_config=self.ai_config\n+        )\n+        \n+        # 初始化决策处理器\n+        self.decision_process = DecisionProcess(\n+            ai_config=self.ai_config,\n+            version_manager=self.version_manager\n+        )\n+        \n+        # 创建处理器\n+        self.code_engineer = CodeEngineer(\n+            config=CodeEngineerConfig(project_dir=self.project_dir, ai_config=self.ai_config),\n+            log_manager=self.log_manager,\n+            diff_helper=Diff(AIConfig(temperature=0.1, model_name=\"gpt-4o\"))\n+        )\n+        \n+        self.chat_processor = ChatProcessor(\n+            ai_config=self.ai_config, \n+            log_manager=self.log_manager,\n+            config=ChatProcessorConfig(\n+                system_prompt=\"你是一个项目助手，负责回答关于代码库的问题。\"\n+            )\n+        )\n+    \n+    def process_requirement(self, requirement: str) -> str:\n+        \"\"\"处理用户需求，自动选择合适的流程\"\"\"\n+        logger.info(f\"开始处理需求: {requirement[:50]}...\")\n+        \n+        # 使用决策处理器分析需求\n+        decision_result = self.decision_process.analyze_requirement(requirement)\n+        \n+        logger.info(f\"决策结果: {'代码修改' if decision_result.needs_code_modification else '对话处理'}\")\n+        logger.info(f\"决策理由: {decision_result.reasoning}\")\n+        \n+        # 根据决策结果选择适当的处理器\n+        if decision_result.needs_code_modification:\n+            # 需要修改代码，使用CodeEngineer\n+            return \"代码修改流程已启动，正在处理...\"\n+        else:\n+            # 只需回答问题，使用ChatProcessor\n+            return self.chat_processor.process_chat(requirement)\n+\n+\n+# 示例使用\n+def main():\n+    setup_logging(log_level=logging.INFO)\n+    load_dotenv()\n+    \n+    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../../.\"))\n+    \n+    workflow_handler = SmartWorkflowHandler({\n+        'project_dir': project_dir,\n+        'issue_id': 25,\n+        'model_name': 'gpt-4o',\n+        'temperature': 0.7\n+    })\n+    \n+    # 测试不同类型的需求\n+    code_requirement = \"增加一个新的日志级别，用于调试复杂问题\"\n+    chat_requirement = \"请解释一下版本管理器的回滚机制是如何工作的\"\n+    \n+    print(\"\\n处理代码修改需求:\")\n+    result1 = workflow_handler.process_requirement(code_requirement)\n+    print(f\"处理结果: {result1}\\n\")\n+    \n+    print(\"\\n处理对话类需求:\")\n+    result2 = workflow_handler.process_requirement(chat_requirement)\n+    print(f\"处理结果: {result2[:100]}...\" if len(result2) > 100 else f\"处理结果: {result2}\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "requirements.txt",
    "content": "diff\n--- requirements.txt\n+++ requirements.txt\n@@ -4,3 +4,4 @@\n python-dotenv==1.0.0\n gitpython==3.1.40\n pydantic==2.5.2\n+typing-extensions>=4.8.0\n\n",
    "file_content": "langchain==0.1.0\nlangchain-openai==0.0.5\nlangchain-core>=0.1.0\npython-dotenv==1.0.0\ngitpython==3.1.40\npydantic==2.5.2\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  }
]