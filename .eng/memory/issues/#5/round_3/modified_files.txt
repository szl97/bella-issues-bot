[
  {
    "file_name": "core/terminal.py",
    "content": "diff\n--- /dev/null\n+++ core/terminal.py\n@@ -0,0 +1,132 @@\n+\"\"\"\n+Terminal utilities for improving console output formatting and styling.\n+Provides functions for colorful and well-structured terminal output.\n+\"\"\"\n+import os\n+import shutil\n+from typing import Optional, Dict, Any, List, Union\n+\n+# Check if colorama is available and use it for Windows compatibility\n+try:\n+    from colorama import init, Fore, Back, Style\n+    init()  # Initialize colorama\n+    HAS_COLORAMA = True\n+except ImportError:\n+    HAS_COLORAMA = False\n+    # Fallback color codes\n+    class DummyColors:\n+        def __getattr__(self, name):\n+            return \"\"\n+    Fore = DummyColors()\n+    Back = DummyColors()\n+    Style = DummyColors()\n+\n+# Terminal size detection\n+def get_terminal_size():\n+    \"\"\"Get the terminal size\"\"\"\n+    return shutil.get_terminal_size((80, 20))  # Default to 80x20 if detection fails\n+\n+# Color definitions for different message types\n+COLORS = {\n+    'title': Fore.CYAN + Style.BRIGHT,\n+    'info': Fore.GREEN,\n+    'warning': Fore.YELLOW,\n+    'error': Fore.RED + Style.BRIGHT,\n+    'success': Fore.GREEN + Style.BRIGHT,\n+    'prompt': Fore.BLUE + Style.BRIGHT,\n+    'file': Fore.MAGENTA,\n+    'key': Fore.YELLOW,\n+    'value': Fore.WHITE,\n+    'code': Fore.CYAN,\n+    'diff_add': Fore.GREEN,\n+    'diff_remove': Fore.RED,\n+    'diff_context': Fore.WHITE,\n+    'reset': Style.RESET_ALL\n+}\n+\n+def print_header(title: str, width: Optional[int] = None, char: str = \"=\", color: str = 'title') -> None:\n+    \"\"\"\n+    Print a header with a title centered in a line of characters.\n+    \n+    Args:\n+        title: The title to display\n+        width: Width of the header (defaults to terminal width)\n+        char: Character to use for the line (default: =)\n+        color: Color name to use from COLORS dict\n+    \"\"\"\n+    if width is None:\n+        width = get_terminal_size().columns\n+    \n+    padding = max(2, (width - len(title) - 2) // 2)\n+    header = char * padding + \" \" + title + \" \" + char * padding\n+    # Ensure the header fills the width\n+    header = header + char * (width - len(header))\n+    \n+    print(f\"{COLORS[color]}{header}{COLORS['reset']}\")\n+\n+def print_subheader(title: str, color: str = 'info') -> None:\n+    \"\"\"Print a smaller section header\"\"\"\n+    print(f\"\\n{COLORS[color]}▶ {title}{COLORS['reset']}\")\n+\n+def print_key_value(key: str, value: Any, indent: int = 0) -> None:\n+    \"\"\"Print a key-value pair with appropriate styling\"\"\"\n+    indent_str = \" \" * indent\n+    print(f\"{indent_str}{COLORS['key']}{key}:{COLORS['reset']} {COLORS['value']}{value}{COLORS['reset']}\")\n+\n+def print_file_info(file_path: str, details: Optional[str] = None) -> None:\n+    \"\"\"Print information about a file with styling\"\"\"\n+    print(f\"{COLORS['file']}📄 {file_path}{COLORS['reset']}\")\n+    if details:\n+        print(f\"   {details}\")\n+\n+def print_code_block(code: str, language: str = \"python\", indent: int = 2) -> None:\n+    \"\"\"Print a formatted code block with syntax coloring indication\"\"\"\n+    indent_str = \" \" * indent\n+    width = get_terminal_size().columns - indent\n+    \n+    # Print code block header\n+    print(f\"{indent_str}{COLORS['code']}\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "examples/example_log_manager.py",
    "content": "diff\n--- /dev/null\n+++ examples/example_log_manager.py\n@@ -0,0 +1,136 @@\n+\"\"\"\n+这个示例展示如何使用LogManager进行日志管理，包括初始化、存档日志、检索日志和回滚操作\n+\"\"\"\n+import os\n+import sys\n+from typing import List, Optional\n+\n+# 添加项目根目录到sys.path，确保可以导入core模块\n+sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\")))\n+\n+from core.diff import DiffInfo\n+from core.log_manager import LogManager, LogConfig, LogEntry\n+from core.log_config import setup_logging\n+from core.terminal import (\n+    print_header, print_subheader, print_key_value, \n+    print_file_info, print_code_block, print_diff,\n+    success, error, confirm_action\n+)\n+\n+\n+def display_log_entries(entries: List[LogEntry]) -> None:\n+    \"\"\"显示日志条目的主要信息\"\"\"\n+    if not entries:\n+        print(\"没有找到日志条目\")\n+        return\n+        \n+    for i, entry in enumerate(entries):\n+        if i > 0:\n+            # Add separator between entries\n+            print(\"\\n\" + \"-\" * 40)\n+            \n+        print_subheader(f\"轮次 {entry.round_num} - {entry.timestamp}\")\n+        print_key_value(\"日志路径\", entry.log_path, indent=2)\n+        \n+        # Show prompt snippets\n+        sys_prompt_preview = entry.sys_prompt[:50] + \"...\" if len(entry.sys_prompt) > 50 else entry.sys_prompt\n+        user_prompt_preview = entry.prompt[:50] + \"...\" if len(entry.prompt) > 50 else entry.prompt\n+        resp_preview = entry.response[:50] + \"...\" if len(entry.response) > 50 else entry.response\n+        \n+        print_key_value(\"系统提示词\", sys_prompt_preview, indent=2)\n+        print_key_value(\"用户提示词\", user_prompt_preview, indent=2)\n+        print_key_value(\"响应预览\", resp_preview, indent=2)\n+        print_key_value(\"修改的文件数量\", len(entry.modified_files), indent=2)\n+\n+\n+def display_round_info(round_entry: Optional[LogEntry]) -> None:\n+    \"\"\"显示特定轮次的详细信息\"\"\"\n+    if not round_entry:\n+        error(\"未找到指定轮次的日志条目\")\n+        return\n+        \n+    print_header(f\"轮次 {round_entry.round_num} 详细信息\")\n+    print_key_value(\"时间戳\", round_entry.timestamp)\n+    print_key_value(\"日志路径\", round_entry.log_path)\n+    \n+    # Show system prompt\n+    print_subheader(\"系统提示词\")\n+    print_code_block(round_entry.sys_prompt, language=\"text\")\n+    \n+    # Show user prompt\n+    print_subheader(\"用户提示词\")\n+    print_code_block(round_entry.prompt, language=\"text\")\n+    \n+    # Show modified files\n+    if round_entry.modified_files:\n+        print_subheader(f\"修改的文件 ({len(round_entry.modified_files)}个)\")\n+        for diff in round_entry.modified_files:\n+            print_file_info(diff.file_path)\n+            print_diff(diff.diff_content, max_lines=10)\n+    else:\n+        print_key_value(\"修改的文件\", \"无\")\n+\n+\n+def main() -> None:\n+    \"\"\"示例主函数，展示LogManager的各种用法\"\"\"\n+    # 设置日志\n+    setup_logging()\n+    \n+    # 创建工作目录 - 使用当前项目根目录\n+    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n+    issue_id = 999  # 使用一个示例issue_id\n+    \n+    print_header(\"LogManager使用示例\", char=\"=\")\n+    \n+    # 初始化LogManager\n+    print_subheader(\"1. 初始化LogManager\")\n+    log_config = LogConfig(\n+        project_dir=project_dir,\n+        issue_id=issue_id,\n+        mode=\"client\"  # 客户端模式\n+    )\n+    log_manager = LogManager(config=log_config)\n+    \n+    print_key_value(\"当前轮次\", log_manager.get_current_round(), indent=2)\n+    print_key_value(\"日志路径\", log_manager.logs_path, indent=2)\n+    print_key_value(\"Issue日志路径\", log_manager.issues_path, indent=2)\n+    \n+    # 创建示例数据\n+    print_subheader(\"2. 存档日志\")\n+    \n+    # 示例提示和响应\n+    sys_prompt = \"你是一个代码助手，帮助用户解决编程问题。\"\n+    user_prompt = \"请帮我实现一个简单的Python函数，用于计算两个数的最大公约数。\"\n+    ai_response = \"\"\"\n+    以下是计算最大公约数的Python函数:\n+    \n+    \n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "requirements.txt",
    "content": "diff\n--- requirements.txt\n+++ requirements.txt\n@@ -2,3 +2,4 @@\n python-dotenv>=1.0.0\n gitpython>=3.1.0\n openai>=1.0.0\n+colorama>=0.4.4\n\n",
    "file_content": "pydantic>=2.0.0\npython-dotenv>=1.0.0\ngitpython>=3.1.0\nopenai>=1.0.0\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  }
]