LICENSE.md:Apache License 2.0 许可证文件，定义了软件使用、复制和分发的条款与条件。包含版权许可、专利许可、再分发条件、免责声明等九个主要章节，为开源项目提供法律保护框架。
README.en.md:bella-issues-bot项目的英文README文件，介绍了项目概览、核心功能、记忆系统架构（LogManager、VersionManager和FileMemory）、安装方法和配置选项。重点说明了项目的两种工作模式和三大记忆组件的工作原理。
README.md:bella-issues-bot项目的中文README文件，详细介绍了项目简介、主要功能、记忆系统（日志管理、版本管理、文件记忆）、安装方法、配置选项和详细使用示例，还包含项目结构说明，全面展示了这个AI代码开发助手的功能和用法。
client/README.md:WorkflowEngine客户端文档，详细介绍了系统的记忆与上下文管理机制（日志管理、版本管理、文件记忆），支持的工作模式（客户端和机器人模式），以及命令行和编程API的使用方法和配置选项。
client/README_FILE_MEMORY.md:FileMemory客户端文档，详细介绍了文件记忆系统的功能、特点、使用方法和工作原理。说明如何通过命令行或编程方式使用FileMemory维护项目文件的功能描述，包含配置选项、最佳实践和故障排除指南。
client/README_GITHUB_WORKFLOWS.md:GitHub工作流生成器文档，详细介绍了如何使用bella-issues-bot自动生成GitHub Actions工作流配置。包含功能概述、命令行参数、工作流文件详解、配置要求、使用场景和自定义方法等内容。
client/__init__.py:Client包的初始化文件，用于从终端运行WorkflowEngine。导出了file_memory_client模块中的initialize_file_memory、update_file_descriptions和process_failed_files函数供编程使用。
client/cli.py:WorkflowEngine的命令行接口，提供解析命令行参数并运行引擎的功能。包含parse_args、get_requirement_text和build_config_from_args函数，支持配置项目路径、问题ID、模型参数、温度设置和操作模式等选项。
client/file_memory_api.py:文件记忆API模块，提供在不使用LogManager的情况下编程使用FileMemory的函数。包含初始化文件记忆、更新文件描述和处理失败文件的功能。
client/file_memory_client.py:FileMemory客户端实现，提供独立的命令行和编程接口来初始化和管理文件记忆系统。包含initialize_file_memory、update_file_descriptions和process_failed_files等核心函数，支持命令行参数配置和环境变量读取。
client/github_workflow_generator.py:GitHub工作流生成器模块，用于创建GitHub Actions工作流文件，实现bella-issues-bot与GitHub的集成。提供generate_workflow_files函数和命令行接口，可生成文件记忆初始化和Issue处理两种工作流配置文件。
client/runner.py:WorkflowEngine的编程API，提供在Python脚本中使用的简化接口。包含run_workflow函数，支持统一的模型和温度设置，以及各种配置选项。
client/terminal.py:终端客户端入口模块，提供命令行接口启动工作流引擎。解析命令行参数、加载环境变量、构建配置并初始化WorkflowEngine处理用户需求。
core/ai.py:AI助手模块，负责与AI模型交互。包含AIAssistant类和AIConfig数据类，封装了模型调用、工具集成和响应生成功能，支持流式输出。
core/chat_processor.py:聊天处理模块，处理非代码修改类的用户交互。ChatProcessor类利用AI能力处理用户问题，提供有针对性回答，并记录聊天历史。
core/code_engineer.py:实现代码工程师核心功能，负责处理用户prompt并生成代码修改。包含CodeEngineer类，通过AI模型分析需求、生成代码diff并应用修改。具有系统提示词管理、错误处理和日志记录功能，与AI助手、Diff处理器和日志管理器交互。
core/decision.py:决策环境模块，用于分析用户需求类型并确定处理流程。包含DecisionProcess类和DecisionResult数据类，通过AI助手判断用户需求是否需要修改代码，并决定使用代码修改流程还是对话流程。与版本管理器(VersionManager)和AI助手(AIAssistant)交互。
core/diff.py:处理Git diff格式的工具类。提供从文本中解析diff信息、应用diff修改的功能，使用AI模型生成修改后文件内容。包含Diff类和DiffInfo数据类，支持文件创建、修改和删除操作。
core/file_fetcher.py:文件获取工具，提供FileFetcher类用于获取项目中的所有文件，支持.gitignore模式过滤，为代码分析和处理提供文件集合。
core/file_memory.py:文件记忆管理模块，负责维护和更新代码文件的描述信息。包含FileMemory类和FileMemoryConfig配置类，通过AI生成文件描述，支持批量处理，跟踪文件变更，为其他组件提供文件上下文信息。
core/file_selector.py:实现基于AI的文件选择功能，通过分析需求自动确定相关文件。包含FileSelector类，提供select_files_for_requirement方法，使用AI助手和工具来智能筛选与特定功能相关的文件。与FileFetcher和FileMemory交互获取项目文件。
core/git_manager.py:Git操作管理模块，封装了与Git仓库交互的功能。包含GitConfig和GitManager两个主要类，提供克隆、拉取、推送、分支管理等Git操作。支持GitHub认证、Issue评论添加，并能处理仓库路径、远程URL和认证令牌，与GitHub工作流集成。
core/log_config.py:日志配置模块，提供统一的日志设置功能。实现了setup_logging和get_logger函数，配置彩色控制台输出和文件日志记录，支持日志轮换。
core/log_manager.py:管理代码生成日志的存储和检索。包含LogManager类，用于存档系统提示词、用户提示词、AI响应等内容，支持按issue和轮次组织日志。提供archive_logs和get_issue_log_entries等方法，记录代码生成过程。
core/prompt_generator.py:提示词生成器，创建结构化提示并从提示中提取信息。使用模板生成包含文件描述、内容和需求的提示词，支持文件内容格式化。
core/version_manager.py:版本管理模块，负责代码生成的版本控制、历史追踪和回退。包含VersionManager类，提供历史轮次提取、格式化历史记录、版本回退分析和执行功能。与GitManager和LogManager交互，为AI助手提供版本回退工具。
core/workflow_engine.py:工作流引擎核心组件，协调版本管理、日志管理和AI交互。包含WorkflowEngine类和WorkflowEngineConfig配置类，负责处理用户需求，根据需求类型执行代码修改或聊天回复流程，是系统的核心协调器。
examples/advanced/custom_workflow.py:自定义工作流处理程序，展示如何将bella-issues-bot集成到自定义应用中。包含preprocess_requirement和postprocess_response两个关键函数，分别用于需求预处理和响应后处理。主程序读取需求文件、进行预处理、调用run_workflow执行工作流，最后进行后处理。
examples/advanced/requirements/feature_request.txt:这是一个需求文档，描述了文件上传系统的功能要求，包括多文件上传、50MB大小限制、支持的文件类型(PDF/DOCX/XLSX/JPG/PNG)、存储配置、返回唯一标识符和URL，以及基本验证和安全检查功能。
examples/example_chat_process.py:聊天处理流程示例，展示如何使用ChatProcessor处理用户对话需求。与代码生成示例不同，不使用版本管理，主要演示如何回答用户关于项目的问题。
examples/example_code_generate.py:代码生成流程示例，展示如何使用CodeEngineer处理代码修改需求。演示了从需求分析到代码生成和提交的完整流程，包含main函数作为入口点。
examples/example_file_memory_client.py:示例文件，演示如何在不使用LogManager的情况下使用FileMemory客户端。展示初始化FileMemory（仅用GitManager）、更新文件描述以及处理失败文件的流程。包含main函数作为入口点。
examples/example_log_manager.py:这个文件是一个示例代码，展示了如何使用LogManager进行日志管理。主要功能包括初始化、存档日志、检索日志和回滚操作。包含的关键类或函数有LogManager、LogConfig、LogEntry以及setup_logging等。与core模块中的diff、log_manager、log_config等文件交互明显。
examples/example_terminal.py:展示如何以编程方式运行工作流的示例文件。包含example_run函数，演示了如何使用client.runner中的run_workflow函数处理简单需求。同时提供了命令行运行的示例说明。
examples/example_workflow.py:WorkflowEngine使用示例，演示如何配置和初始化工作流引擎处理用户需求。创建WorkflowEngineConfig配置，设置项目目录、模型参数等，调用process_requirement方法处理需求。作为框架使用的入门示例。
pyproject.toml:项目配置文件，定义了bella-issues-bot项目的元数据、依赖和工具配置。包含poetry构建配置、依赖包列表、命令行入口点以及代码格式化工具设置。为项目提供基础构建和开发环境配置。
quick-start.en.md:bella-issues-bot项目的英文快速入门指南，简洁地介绍了基本设置、常见使用场景（个人助手和GitHub集成）、文件记忆系统操作、配置方法以及最佳实践，帮助英文用户迅速掌握工具的核心功能。
quick-start.md:bella-issues-bot项目的中文使用指南，详细介绍了个人开发助手模式和GitHub工作流集成的使用方法，包括安装步骤、文件记忆系统初始化、命令行参数和环境变量配置等内容，帮助用户快速上手该工具。
requirements.txt:这个文件列出了项目的Python依赖库及其版本要求，包括pydantic、python-dotenv、gitpython和openai等库，确保项目环境的正确配置。
scripts/generate_workflows.sh:Bash脚本，为bella-issues-bot集成提供命令行接口，包含帮助信息展示和参数传递功能。该脚本最终调用Python模块client.github_workflow_generator来实际生成工作流文件，支持设置输出目录、分支名称和模型参数等选项。
scripts/init_file_memory.sh:一个Bash脚本，作为client/file_memory_client.py的命令行包装器。提供了简化的接口来运行文件记忆初始化，支持设置项目目录、AI模型、温度等参数。包含帮助信息展示功能，并将所有命令行参数传递给Python模块。
scripts/run_bot.sh:启动bella-issues-bot的Bash帮助脚本，简化命令行参数输入。提供简化的参数选项，支持设置模型名称、温度等参数，并调用Python客户端模块。
tests/test_git_manager.py:测试文件，用于验证GitManager类的各种功能。包含多个测试函数，测试内容涵盖分支创建、提交、推送、克隆、拉取、添加Issue评论等Git操作。测试使用环境变量配置与真实GitHub仓库交互。
